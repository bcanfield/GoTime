// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateGame } from "./create_game_reducer.ts";
export { CreateGame };
import { JoinGame } from "./join_game_reducer.ts";
export { JoinGame };
import { PassMove } from "./pass_move_reducer.ts";
export { PassMove };
import { PlaceStone } from "./place_stone_reducer.ts";
export { PlaceStone };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { GameTableHandle } from "./game_table.ts";
export { GameTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Game } from "./game_type.ts";
export { Game };
import { Message } from "./message_type.ts";
export { Message };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    game: {
      tableName: "game",
      rowType: Game.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    create_game: {
      reducerName: "create_game",
      argsType: CreateGame.getTypeScriptAlgebraicType(),
    },
    join_game: {
      reducerName: "join_game",
      argsType: JoinGame.getTypeScriptAlgebraicType(),
    },
    pass_move: {
      reducerName: "pass_move",
      argsType: PassMove.getTypeScriptAlgebraicType(),
    },
    place_stone: {
      reducerName: "place_stone",
      argsType: PlaceStone.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateGame", args: CreateGame }
| { name: "JoinGame", args: JoinGame }
| { name: "PassMove", args: PassMove }
| { name: "PlaceStone", args: PlaceStone }
| { name: "SendMessage", args: SendMessage }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  createGame(boardSize: number | undefined, handicap: number | undefined) {
    const __args = { boardSize, handicap };
    let __writer = new BinaryWriter(1024);
    CreateGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_game", __argsBuffer, this.setCallReducerFlags.createGameFlags);
  }

  onCreateGame(callback: (ctx: ReducerEventContext, boardSize: number | undefined, handicap: number | undefined) => void) {
    this.connection.onReducer("create_game", callback);
  }

  removeOnCreateGame(callback: (ctx: ReducerEventContext, boardSize: number | undefined, handicap: number | undefined) => void) {
    this.connection.offReducer("create_game", callback);
  }

  joinGame(gameId: bigint) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    JoinGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_game", __argsBuffer, this.setCallReducerFlags.joinGameFlags);
  }

  onJoinGame(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.onReducer("join_game", callback);
  }

  removeOnJoinGame(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.offReducer("join_game", callback);
  }

  passMove(gameId: bigint) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    PassMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pass_move", __argsBuffer, this.setCallReducerFlags.passMoveFlags);
  }

  onPassMove(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.onReducer("pass_move", callback);
  }

  removeOnPassMove(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.offReducer("pass_move", callback);
  }

  placeStone(gameId: bigint, x: number, y: number) {
    const __args = { gameId, x, y };
    let __writer = new BinaryWriter(1024);
    PlaceStone.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("place_stone", __argsBuffer, this.setCallReducerFlags.placeStoneFlags);
  }

  onPlaceStone(callback: (ctx: ReducerEventContext, gameId: bigint, x: number, y: number) => void) {
    this.connection.onReducer("place_stone", callback);
  }

  removeOnPlaceStone(callback: (ctx: ReducerEventContext, gameId: bigint, x: number, y: number) => void) {
    this.connection.offReducer("place_stone", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

}

export class SetReducerFlags {
  createGameFlags: CallReducerFlags = 'FullUpdate';
  createGame(flags: CallReducerFlags) {
    this.createGameFlags = flags;
  }

  joinGameFlags: CallReducerFlags = 'FullUpdate';
  joinGame(flags: CallReducerFlags) {
    this.joinGameFlags = flags;
  }

  passMoveFlags: CallReducerFlags = 'FullUpdate';
  passMove(flags: CallReducerFlags) {
    this.passMoveFlags = flags;
  }

  placeStoneFlags: CallReducerFlags = 'FullUpdate';
  placeStone(flags: CallReducerFlags) {
    this.placeStoneFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get game(): GameTableHandle {
    return new GameTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.game));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
